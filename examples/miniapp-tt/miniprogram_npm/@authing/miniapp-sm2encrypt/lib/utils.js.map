{"version":3,"file":"node_modules/@authing/miniapp-sm2encrypt/lib/utils.js","names":["BigInteger","SecureRandom","ECCurveFp","rng","curve","G","n","generateEcparam","getGlobalCurve","p","a","b","decodePointHex","generateKeyPairHex","c","d","bitLength","mod","subtract","ONE","add","privateKey","leftPad","toString","P","multiply","publicKey","getX","toBigInteger","getY","compressPublicKeyHex","s","length","Error","len","xHex","substr","prefix","equals","ZERO","utf8ToHex","input","unescape","encodeURIComponent","words","i","charCodeAt","hexChars","bite","push","join","num","Array","arrayToHex","arr","map","item","arrayToUtf8","j","parseInt","latin1Chars","String","fromCharCode","decodeURIComponent","escape","e","hexToArray","hexStr","hexStrLength","verifyPublicKey","point","x","square","comparePublicKeyHex","publicKey1","publicKey2","point1","point2"],"sources":["node_modules/@authing/miniapp-sm2encrypt/lib/utils.js"],"sourcesContent":["/* eslint-disable no-bitwise, no-mixed-operators, no-use-before-define, max-len */\nimport { BigInteger, SecureRandom } from 'jsbn'\nimport { ECCurveFp } from './ec'\n\nconst rng = new SecureRandom()\nconst {curve, G, n} = generateEcparam()\n\n/**\n * 获取公共椭圆曲线\n */\nfunction getGlobalCurve() {\n  return curve\n}\n\n/**\n * 生成ecparam\n */\nfunction generateEcparam() {\n  // 椭圆曲线\n  const p = new BigInteger('FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFF', 16)\n  const a = new BigInteger('FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFC', 16)\n  const b = new BigInteger('28E9FA9E9D9F5E344D5A9E4BCF6509A7F39789F515AB8F92DDBCBD414D940E93', 16)\n  const curve = new ECCurveFp(p, a, b)\n\n  // 基点\n  const gxHex = '32C4AE2C1F1981195F9904466A39C9948FE30BBFF2660BE1715A4589334C74C7'\n  const gyHex = 'BC3736A2F4F6779C59BDCEE36B692153D0A9877CC62A474002DF32E52139F0A0'\n  const G = curve.decodePointHex('04' + gxHex + gyHex)\n\n  const n = new BigInteger('FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF7203DF6B21C6052B53BBF40939D54123', 16)\n\n  return {curve, G, n}\n}\n\n/**\n * 生成密钥对：publicKey = privateKey * G\n */\nfunction generateKeyPairHex(a, b, c) {\n  const random = a ? new BigInteger(a, b, c) : new BigInteger(n.bitLength(), rng)\n  const d = random.mod(n.subtract(BigInteger.ONE)).add(BigInteger.ONE) // 随机数\n  const privateKey = leftPad(d.toString(16), 64)\n\n  const P = G.multiply(d) // P = dG，p 为公钥，d 为私钥\n  const Px = leftPad(P.getX().toBigInteger().toString(16), 64)\n  const Py = leftPad(P.getY().toBigInteger().toString(16), 64)\n  const publicKey = '04' + Px + Py\n\n  return {privateKey, publicKey}\n}\n\n/**\n * 生成压缩公钥\n */\nfunction compressPublicKeyHex(s) {\n  if (s.length !== 130) throw new Error('Invalid public key to compress')\n\n  const len = (s.length - 2) / 2\n  const xHex = s.substr(2, len)\n  const y = new BigInteger(s.substr(len + 2, len), 16)\n\n  let prefix = '03'\n  if (y.mod(new BigInteger('2')).equals(BigInteger.ZERO)) prefix = '02'\n\n  return prefix + xHex\n}\n\n/**\n * utf8串转16进制串\n */\nfunction utf8ToHex(input) {\n  input = unescape(encodeURIComponent(input))\n\n  const length = input.length\n\n  // 转换到字数组\n  const words = []\n  for (let i = 0; i < length; i++) {\n    words[i >>> 2] |= (input.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8)\n  }\n\n  // 转换到16进制\n  const hexChars = []\n  for (let i = 0; i < length; i++) {\n    const bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff\n    hexChars.push((bite >>> 4).toString(16))\n    hexChars.push((bite & 0x0f).toString(16))\n  }\n\n  return hexChars.join('')\n}\n\n/**\n * 补全16进制字符串\n */\nfunction leftPad(input, num) {\n  if (input.length >= num) return input\n\n  return (new Array(num - input.length + 1)).join('0') + input\n}\n\n/**\n * 转成16进制串\n */\nfunction arrayToHex(arr) {\n  return arr.map(item => {\n    item = item.toString(16)\n    return item.length === 1 ? '0' + item : item\n  }).join('')\n}\n\n/**\n * 转成utf8串\n */\nfunction arrayToUtf8(arr) {\n  const words = []\n  let j = 0\n  for (let i = 0; i < arr.length * 2; i += 2) {\n    words[i >>> 3] |= parseInt(arr[j], 10) << (24 - (i % 8) * 4)\n    j++\n  }\n\n  try {\n    const latin1Chars = []\n\n    for (let i = 0; i < arr.length; i++) {\n      const bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff\n      latin1Chars.push(String.fromCharCode(bite))\n    }\n\n    return decodeURIComponent(escape(latin1Chars.join('')))\n  } catch (e) {\n    throw new Error('Malformed UTF-8 data')\n  }\n}\n\n/**\n * 转成字节数组\n */\nfunction hexToArray(hexStr) {\n  const words = []\n  let hexStrLength = hexStr.length\n\n  if (hexStrLength % 2 !== 0) {\n    hexStr = leftPad(hexStr, hexStrLength + 1)\n  }\n\n  hexStrLength = hexStr.length\n\n  for (let i = 0; i < hexStrLength; i += 2) {\n    words.push(parseInt(hexStr.substr(i, 2), 16))\n  }\n  return words\n}\n\n/**\n * 验证公钥是否为椭圆曲线上的点\n */\nfunction verifyPublicKey(publicKey) {\n  const point = curve.decodePointHex(publicKey)\n  if (!point) return false\n\n  const x = point.getX()\n  const y = point.getY()\n\n  // 验证 y^2 是否等于 x^3 + ax + b\n  return y.square().equals(x.multiply(x.square()).add(x.multiply(curve.a)).add(curve.b))\n}\n\n/**\n * 验证公钥是否等价，等价返回true\n */\nfunction comparePublicKeyHex(publicKey1, publicKey2) {\n  const point1 = curve.decodePointHex(publicKey1)\n  if (!point1) return false\n\n  const point2 = curve.decodePointHex(publicKey2)\n  if (!point2) return false\n\n  return point1.equals(point2)\n}\n\nexport {\n  getGlobalCurve,\n  generateEcparam,\n  generateKeyPairHex,\n  compressPublicKeyHex,\n  utf8ToHex,\n  leftPad,\n  arrayToHex,\n  arrayToUtf8,\n  hexToArray,\n  verifyPublicKey,\n  comparePublicKeyHex,\n}\n"],"mappings":"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"}