{"version":3,"file":"node_modules/@authing/miniapp-sm2encrypt/lib/ec.js","names":["BigInteger","TWO","THREE","ECFieldElementFp","constructor","q","x","this","equals","other","toBigInteger","negate","mod","add","b","subtract","multiply","divide","modInverse","square","ECPointFp","curve","y","z","ONE","zinv","getX","fromBigInteger","getY","isInfinity","ZERO","x1","y1","z1","x2","y2","z2","w1","w2","w3","w4","w5","w6","twice","infinity","w7","w8","w9","w10","w11","x3","y3","z3","signum","a","shiftLeft","k","k3","neg","Q","i","bitLength","k3Bit","testBit","ECCurveFp","decodePointHex","s","parseInt","substr","modPow","len","length","xHex","yHex"],"sources":["node_modules/@authing/miniapp-sm2encrypt/lib/ec.js"],"sourcesContent":["/* eslint-disable no-case-declarations, max-len */\r\nimport { BigInteger } from 'jsbn'\r\n\r\n/**\r\n * thanks for Tom Wu : http://www-cs-students.stanford.edu/~tjw/jsbn/\r\n *\r\n * Basic Javascript Elliptic Curve implementation\r\n * Ported loosely from BouncyCastle's Java EC code\r\n * Only Fp curves implemented for now\r\n */\r\n\r\nconst TWO = new BigInteger('2')\r\nconst THREE = new BigInteger('3')\r\n\r\n/**\r\n * 椭圆曲线域元素\r\n */\r\nclass ECFieldElementFp {\r\n  constructor(q, x) {\r\n    this.x = x\r\n    this.q = q\r\n    // TODO if (x.compareTo(q) >= 0) error\r\n  }\r\n\r\n  /**\r\n   * 判断相等\r\n   */\r\n  equals(other) {\r\n    if (other === this) return true\r\n    return (this.q.equals(other.q) && this.x.equals(other.x))\r\n  }\r\n\r\n  /**\r\n   * 返回具体数值\r\n   */\r\n  toBigInteger() {\r\n    return this.x\r\n  }\r\n\r\n  /**\r\n   * 取反\r\n   */\r\n  negate() {\r\n    return new ECFieldElementFp(this.q, this.x.negate().mod(this.q))\r\n  }\r\n\r\n  /**\r\n   * 相加\r\n   */\r\n  add(b) {\r\n    return new ECFieldElementFp(this.q, this.x.add(b.toBigInteger()).mod(this.q))\r\n  }\r\n\r\n  /**\r\n   * 相减\r\n   */\r\n  subtract(b) {\r\n    return new ECFieldElementFp(this.q, this.x.subtract(b.toBigInteger()).mod(this.q))\r\n  }\r\n\r\n  /**\r\n   * 相乘\r\n   */\r\n  multiply(b) {\r\n    return new ECFieldElementFp(this.q, this.x.multiply(b.toBigInteger()).mod(this.q))\r\n  }\r\n\r\n  /**\r\n   * 相除\r\n   */\r\n  divide(b) {\r\n    return new ECFieldElementFp(this.q, this.x.multiply(b.toBigInteger().modInverse(this.q)).mod(this.q))\r\n  }\r\n\r\n  /**\r\n   * 平方\r\n   */\r\n  square() {\r\n    return new ECFieldElementFp(this.q, this.x.square().mod(this.q))\r\n  }\r\n}\r\n\r\nclass ECPointFp {\r\n  constructor(curve, x, y, z) {\r\n    this.curve = curve\r\n    this.x = x\r\n    this.y = y\r\n    // 标准射影坐标系：zinv == null 或 z * zinv == 1\r\n    this.z = z == null ? BigInteger.ONE : z\r\n    this.zinv = null\r\n    // TODO: compression flag\r\n  }\r\n\r\n  getX() {\r\n    if (this.zinv === null) this.zinv = this.z.modInverse(this.curve.q)\r\n\r\n    return this.curve.fromBigInteger(this.x.toBigInteger().multiply(this.zinv).mod(this.curve.q))\r\n  }\r\n\r\n  getY() {\r\n    if (this.zinv === null) this.zinv = this.z.modInverse(this.curve.q)\r\n\r\n    return this.curve.fromBigInteger(this.y.toBigInteger().multiply(this.zinv).mod(this.curve.q))\r\n  }\r\n\r\n  /**\r\n   * 判断相等\r\n   */\r\n  equals(other) {\r\n    if (other === this) return true\r\n    if (this.isInfinity()) return other.isInfinity()\r\n    if (other.isInfinity()) return this.isInfinity()\r\n\r\n    // u = y2 * z1 - y1 * z2\r\n    const u = other.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(other.z)).mod(this.curve.q)\r\n    if (!u.equals(BigInteger.ZERO)) return false\r\n\r\n    // v = x2 * z1 - x1 * z2\r\n    const v = other.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(other.z)).mod(this.curve.q)\r\n    return v.equals(BigInteger.ZERO)\r\n  }\r\n\r\n  /**\r\n   * 是否是无穷远点\r\n   */\r\n  isInfinity() {\r\n    if ((this.x === null) && (this.y === null)) return true\r\n    return this.z.equals(BigInteger.ZERO) && !this.y.toBigInteger().equals(BigInteger.ZERO)\r\n  }\r\n\r\n  /**\r\n   * 取反，x 轴对称点\r\n   */\r\n  negate() {\r\n    return new ECPointFp(this.curve, this.x, this.y.negate(), this.z)\r\n  }\r\n\r\n  /**\r\n   * 相加\r\n   *\r\n   * 标准射影坐标系：\r\n   *\r\n   * λ1 = x1 * z2\r\n   * λ2 = x2 * z1\r\n   * λ3 = λ1 − λ2\r\n   * λ4 = y1 * z2\r\n   * λ5 = y2 * z1\r\n   * λ6 = λ4 − λ5\r\n   * λ7 = λ1 + λ2\r\n   * λ8 = z1 * z2\r\n   * λ9 = λ3^2\r\n   * λ10 = λ3 * λ9\r\n   * λ11 = λ8 * λ6^2 − λ7 * λ9\r\n   * x3 = λ3 * λ11\r\n   * y3 = λ6 * (λ9 * λ1 − λ11) − λ4 * λ10\r\n   * z3 = λ10 * λ8\r\n   */\r\n  add(b) {\r\n    if (this.isInfinity()) return b\r\n    if (b.isInfinity()) return this\r\n\r\n    const x1 = this.x.toBigInteger()\r\n    const y1 = this.y.toBigInteger()\r\n    const z1 = this.z\r\n    const x2 = b.x.toBigInteger()\r\n    const y2 = b.y.toBigInteger()\r\n    const z2 = b.z\r\n    const q = this.curve.q\r\n\r\n    const w1 = x1.multiply(z2).mod(q)\r\n    const w2 = x2.multiply(z1).mod(q)\r\n    const w3 = w1.subtract(w2)\r\n    const w4 = y1.multiply(z2).mod(q)\r\n    const w5 = y2.multiply(z1).mod(q)\r\n    const w6 = w4.subtract(w5)\r\n\r\n    if (BigInteger.ZERO.equals(w3)) {\r\n      if (BigInteger.ZERO.equals(w6)) {\r\n        return this.twice() // this == b，计算自加\r\n      }\r\n      return this.curve.infinity // this == -b，则返回无穷远点\r\n    }\r\n\r\n    const w7 = w1.add(w2)\r\n    const w8 = z1.multiply(z2).mod(q)\r\n    const w9 = w3.square().mod(q)\r\n    const w10 = w3.multiply(w9).mod(q)\r\n    const w11 = w8.multiply(w6.square()).subtract(w7.multiply(w9)).mod(q)\r\n\r\n    const x3 = w3.multiply(w11).mod(q)\r\n    const y3 = w6.multiply(w9.multiply(w1).subtract(w11)).subtract(w4.multiply(w10)).mod(q)\r\n    const z3 = w10.multiply(w8).mod(q)\r\n\r\n    return new ECPointFp(this.curve, this.curve.fromBigInteger(x3), this.curve.fromBigInteger(y3), z3)\r\n  }\r\n\r\n  /**\r\n   * 自加\r\n   *\r\n   * 标准射影坐标系：\r\n   *\r\n   * λ1 = 3 * x1^2 + a * z1^2\r\n   * λ2 = 2 * y1 * z1\r\n   * λ3 = y1^2\r\n   * λ4 = λ3 * x1 * z1\r\n   * λ5 = λ2^2\r\n   * λ6 = λ1^2 − 8 * λ4\r\n   * x3 = λ2 * λ6\r\n   * y3 = λ1 * (4 * λ4 − λ6) − 2 * λ5 * λ3\r\n   * z3 = λ2 * λ5\r\n   */\r\n  twice() {\r\n    if (this.isInfinity()) return this\r\n    if (!this.y.toBigInteger().signum()) return this.curve.infinity\r\n\r\n    const x1 = this.x.toBigInteger()\r\n    const y1 = this.y.toBigInteger()\r\n    const z1 = this.z\r\n    const q = this.curve.q\r\n    const a = this.curve.a.toBigInteger()\r\n\r\n    const w1 = x1.square().multiply(THREE).add(a.multiply(z1.square())).mod(q)\r\n    const w2 = y1.shiftLeft(1).multiply(z1).mod(q)\r\n    const w3 = y1.square().mod(q)\r\n    const w4 = w3.multiply(x1).multiply(z1).mod(q)\r\n    const w5 = w2.square().mod(q)\r\n    const w6 = w1.square().subtract(w4.shiftLeft(3)).mod(q)\r\n\r\n    const x3 = w2.multiply(w6).mod(q)\r\n    const y3 = w1.multiply(w4.shiftLeft(2).subtract(w6)).subtract(w5.shiftLeft(1).multiply(w3)).mod(q)\r\n    const z3 = w2.multiply(w5).mod(q)\r\n\r\n    return new ECPointFp(this.curve, this.curve.fromBigInteger(x3), this.curve.fromBigInteger(y3), z3)\r\n  }\r\n\r\n  /**\r\n   * 倍点计算\r\n   */\r\n  multiply(k) {\r\n    if (this.isInfinity()) return this\r\n    if (!k.signum()) return this.curve.infinity\r\n\r\n    // 使用加减法\r\n    const k3 = k.multiply(THREE)\r\n    const neg = this.negate()\r\n    let Q = this\r\n\r\n    for (let i = k3.bitLength() - 2; i > 0; i--) {\r\n      Q = Q.twice()\r\n\r\n      const k3Bit = k3.testBit(i)\r\n      const kBit = k.testBit(i)\r\n\r\n      if (k3Bit !== kBit) {\r\n        Q = Q.add(k3Bit ? this : neg)\r\n      }\r\n    }\r\n\r\n    return Q\r\n  }\r\n}\r\n\r\n/**\r\n * 椭圆曲线 y^2 = x^3 + ax + b\r\n */\r\nclass ECCurveFp {\r\n  constructor(q, a, b) {\r\n    this.q = q\r\n    this.a = this.fromBigInteger(a)\r\n    this.b = this.fromBigInteger(b)\r\n    this.infinity = new ECPointFp(this, null, null) // 无穷远点\r\n  }\r\n\r\n  /**\r\n   * 判断两个椭圆曲线是否相等\r\n   */\r\n  equals(other) {\r\n    if (other === this) return true\r\n    return (this.q.equals(other.q) && this.a.equals(other.a) && this.b.equals(other.b))\r\n  }\r\n\r\n  /**\r\n   * 生成椭圆曲线域元素\r\n   */\r\n  fromBigInteger(x) {\r\n    return new ECFieldElementFp(this.q, x)\r\n  }\r\n\r\n  /**\r\n   * 解析 16 进制串为椭圆曲线点\r\n   */\r\n  decodePointHex(s) {\r\n    switch (parseInt(s.substr(0, 2), 16)) {\r\n      // 第一个字节\r\n      case 0:\r\n        return this.infinity\r\n      case 2:\r\n      case 3:\r\n        // 压缩\r\n        const x = this.fromBigInteger(new BigInteger(s.substr(2), 16))\r\n        // 对 p ≡ 3 (mod4)，即存在正整数 u，使得 p = 4u + 3\r\n        // 计算 y = (√ (x^3 + ax + b) % p)^(u + 1) modp\r\n        let y = this.fromBigInteger(x.multiply(x.square()).add(\r\n          x.multiply(this.a)\r\n        ).add(this.b).toBigInteger()\r\n          .modPow(\r\n            this.q.divide(new BigInteger('4')).add(BigInteger.ONE), this.q\r\n          ))\r\n        // 算出结果 2 进制最后 1 位不等于第 1 个字节减 2 则取反\r\n        if (!y.toBigInteger().mod(TWO).equals(new BigInteger(s.substr(0, 2), 16).subtract(TWO))) {\r\n          y = y.negate()\r\n        }\r\n        return new ECPointFp(this, x, y)\r\n      case 4:\r\n      case 6:\r\n      case 7:\r\n        const len = (s.length - 2) / 2\r\n        const xHex = s.substr(2, len)\r\n        const yHex = s.substr(len + 2, len)\r\n\r\n        return new ECPointFp(this, this.fromBigInteger(new BigInteger(xHex, 16)), this.fromBigInteger(new BigInteger(yHex, 16)))\r\n      default:\r\n        // 不支持\r\n        return null\r\n    }\r\n  }\r\n}\r\n\r\nexport {\r\n  ECPointFp,\r\n  ECCurveFp\r\n}\r\n"],"mappings":"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"}