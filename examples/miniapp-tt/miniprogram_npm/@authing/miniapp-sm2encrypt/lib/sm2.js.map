{"version":3,"file":"node_modules/@authing/miniapp-sm2encrypt/lib/sm2.js","names":["BigInteger","_","sm3","C1C2C3","doEncrypt","msg","publicKey","cipherMode","hexToArray","utf8ToHex","Array","prototype","slice","call","getGlobalCurve","decodePointHex","keypair","generateKeyPairHex","k","privateKey","c1","length","substr","p","multiply","x2","leftPad","getX","toBigInteger","toRadix","y2","getY","c3","arrayToHex","concat","ct","offset","t","z","nextT","i","len","c2"],"sources":["node_modules/@authing/miniapp-sm2encrypt/lib/sm2.js"],"sourcesContent":["/* eslint-disable no-use-before-define */\nimport { BigInteger } from 'jsbn'\nimport * as _ from './utils'\nimport { sm3 } from './sm3'\n\nconst C1C2C3 = 0\n\n/**\n * 加密\n */\nfunction doEncrypt(msg, publicKey, cipherMode = 1) {\n  msg = typeof msg === 'string' ? _.hexToArray(_.utf8ToHex(msg)) : Array.prototype.slice.call(msg)\n  publicKey = _.getGlobalCurve().decodePointHex(publicKey) // 先将公钥转成点\n\n  const keypair = _.generateKeyPairHex()\n  const k = new BigInteger(keypair.privateKey, 16) // 随机数 k\n\n  // c1 = k * G\n  let c1 = keypair.publicKey\n  if (c1.length > 128) c1 = c1.substr(c1.length - 128)\n\n  // (x2, y2) = k * publicKey\n  const p = publicKey.multiply(k)\n  const x2 = _.hexToArray(_.leftPad(p.getX().toBigInteger().toRadix(16), 64))\n  const y2 = _.hexToArray(_.leftPad(p.getY().toBigInteger().toRadix(16), 64))\n\n  // c3 = hash(x2 || msg || y2)\n  const c3 = _.arrayToHex(sm3([].concat(x2, msg, y2)))\n\n  let ct = 1\n  let offset = 0\n  let t = [] // 256 位\n  const z = [].concat(x2, y2)\n  const nextT = () => {\n    // (1) Hai = hash(z || ct)\n    // (2) ct++\n    t = sm3([...z, ct >> 24 & 0x00ff, ct >> 16 & 0x00ff, ct >> 8 & 0x00ff, ct & 0x00ff])\n    ct++\n    offset = 0\n  }\n  nextT() // 先生成 Ha1\n\n  for (let i = 0, len = msg.length; i < len; i++) {\n    // t = Ha1 || Ha2 || Ha3 || Ha4\n    if (offset === t.length) nextT()\n\n    // c2 = msg ^ t\n    msg[i] ^= t[offset++] & 0xff\n  }\n  const c2 = _.arrayToHex(msg)\n\n  return cipherMode === C1C2C3 ? c1 + c2 + c3 : c1 + c3 + c2\n}\n\nexport {\n  doEncrypt\n}\n"],"mappings":"OACSA,eAAkB,iBACfC,MAAO,iBACVC,QAAW,QAEpB,MAAMC,OAAS,EAKf,SAASC,UAAUC,EAAKC,EAAWC,EAAa,GAC9CF,EAAqB,iBAARA,EAAmBJ,EAAEO,WAAWP,EAAEQ,UAAUJ,IAAQK,MAAMC,UAAUC,MAAMC,KAAKR,GAC5FC,EAAYL,EAAEa,iBAAiBC,eAAeT,GAE9C,MAAMU,EAAUf,EAAEgB,qBACZC,EAAI,IAAIlB,WAAWgB,EAAQG,WAAY,IAG7C,IAAIC,EAAKJ,EAAQV,UACbc,EAAGC,OAAS,MAAKD,EAAKA,EAAGE,OAAOF,EAAGC,OAAS,MAGhD,MAAME,EAAIjB,EAAUkB,SAASN,GACvBO,EAAKxB,EAAEO,WAAWP,EAAEyB,QAAQH,EAAEI,OAAOC,eAAeC,QAAQ,IAAK,KACjEC,EAAK7B,EAAEO,WAAWP,EAAEyB,QAAQH,EAAEQ,OAAOH,eAAeC,QAAQ,IAAK,KAGjEG,EAAK/B,EAAEgC,WAAW/B,IAAI,GAAGgC,OAAOT,EAAIpB,EAAKyB,KAE/C,IAAIK,EAAK,EACLC,EAAS,EACTC,EAAI,GACR,MAAMC,EAAI,GAAGJ,OAAOT,EAAIK,GAClBS,EAAQ,KAGZF,EAAInC,IAAI,IAAIoC,EAAGH,GAAM,GAAK,IAAQA,GAAM,GAAK,IAAQA,GAAM,EAAI,IAAa,IAALA,IACvEA,IACAC,EAAS,GAEXG,IAEA,IAAK,IAAIC,EAAI,EAAGC,EAAMpC,EAAIgB,OAAQmB,EAAIC,EAAKD,IAErCJ,IAAWC,EAAEhB,QAAQkB,IAGzBlC,EAAImC,IAAoB,IAAdH,EAAED,KAEd,MAAMM,EAAKzC,EAAEgC,WAAW5B,GAExB,OA9Ca,IA8CNE,EAAwBa,EAAKsB,EAAKV,EAAKZ,EAAKY,EAAKU,CAC1D,QAGEtC"}